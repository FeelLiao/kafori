Settings:
  Output files: "out/hisat2_index/genome.*.ht2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Local offset rate: 3 (one in 8)
  Local fTable chars: 6
  Local sequence length: 57344
  Local sequence overlap between two consecutive indexes: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 42
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/feelliao/project/kafori/tests/upstream/ref/Saccharomyces_cerevisiae.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to read SNPs and splice sites: 00:00:00
Using parameters --bmax 1139729 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1139729 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 22 sample suffixes
Generating random suffixes
QSorting 22 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 22 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 3, merged 10; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 3; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 868364 (target: 1139728)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering GFM loop
Getting block 1 of 14
  Reserving size (1139729) for bucket 1
Getting block 2 of 14
  Reserving size (1139729) for bucket 2
  Calculating Z arrays for bucket 1
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 1:
  Entering block accumulator loop for bucket 2:
  bucket 1: 10%
  bucket 2: 10%
  bucket 1: 20%
  bucket 2: 20%
  bucket 1: 30%
  bucket 2: 30%
  bucket 1: 40%
  bucket 2: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 2: 50%
  bucket 1: 70%
  bucket 2: 60%
  bucket 1: 80%
  bucket 2: 70%
  bucket 1: 90%
  bucket 2: 80%
  bucket 1: 100%
  Sorting block of length 1083507 for bucket 1
  (Using difference cover)
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 1036331 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1083508 for bucket 1
  Sorting block time: 00:00:00
Returning block of 1036332 for bucket 2
Getting block 3 of 14
  Reserving size (1139729) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
Getting block 4 of 14
  Reserving size (1139729) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 3: 30%
  bucket 4: 10%
  bucket 3: 40%
  bucket 4: 20%
  bucket 3: 50%
  bucket 4: 30%
  bucket 3: 60%
  bucket 4: 40%
  bucket 3: 70%
  bucket 3: 80%
  bucket 4: 50%
  bucket 3: 90%
  bucket 4: 60%
  bucket 3: 100%
  Sorting block of length 643000 for bucket 3
  (Using difference cover)
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 1062195 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 643001 for bucket 3
Getting block 5 of 14
  Reserving size (1139729) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  Sorting block time: 00:00:00
Returning block of 1062196 for bucket 4
  bucket 5: 70%
  bucket 5: 80%
Getting block 6 of 14
  Reserving size (1139729) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 5: 90%
  bucket 6: 10%
  bucket 5: 100%
  Sorting block of length 1005504 for bucket 5
  (Using difference cover)
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 647564 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1005505 for bucket 5
Getting block 7 of 14
  Reserving size (1139729) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  Sorting block time: 00:00:00
Returning block of 647565 for bucket 6
  bucket 7: 30%
Getting block 8 of 14
  Reserving size (1139729) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 7: 40%
  bucket 8: 10%
  bucket 7: 50%
  bucket 8: 20%
  bucket 7: 60%
  bucket 8: 30%
  bucket 7: 70%
  bucket 8: 40%
  bucket 7: 80%
  bucket 8: 50%
  bucket 7: 90%
  bucket 8: 60%
  bucket 7: 100%
  Sorting block of length 732497 for bucket 7
  (Using difference cover)
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 882677 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 732498 for bucket 7
Getting block 9 of 14
  Reserving size (1139729) for bucket 9
  Calculating Z arrays for bucket 9
  Entering block accumulator loop for bucket 9:
  bucket 9: 10%
  bucket 9: 20%
  bucket 9: 30%
  Sorting block time: 00:00:00
Returning block of 882678 for bucket 8
  bucket 9: 40%
Getting block 10 of 14
  Reserving size (1139729) for bucket 10
  Calculating Z arrays for bucket 10
  Entering block accumulator loop for bucket 10:
  bucket 9: 50%
  bucket 9: 60%
  bucket 10: 10%
  bucket 9: 70%
  bucket 10: 20%
  bucket 9: 80%
  bucket 10: 30%
  bucket 9: 90%
  bucket 10: 40%
  bucket 9: 100%
  Sorting block of length 921103 for bucket 9
  (Using difference cover)
  bucket 10: 50%
  bucket 10: 60%
  bucket 10: 70%
  bucket 10: 80%
  bucket 10: 90%
  bucket 10: 100%
  Sorting block of length 1041213 for bucket 10
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 921104 for bucket 9
Getting block 11 of 14
  Reserving size (1139729) for bucket 11
  Calculating Z arrays for bucket 11
  Entering block accumulator loop for bucket 11:
  bucket 11: 10%
  bucket 11: 20%
  bucket 11: 30%
  bucket 11: 40%
  bucket 11: 50%
  Sorting block time: 00:00:00
Returning block of 1041214 for bucket 10
  bucket 11: 60%
  bucket 11: 70%
Getting block 12 of 14
  Reserving size (1139729) for bucket 12
  Calculating Z arrays for bucket 12
  Entering block accumulator loop for bucket 12:
  bucket 11: 80%
  bucket 12: 10%
  bucket 11: 90%
  bucket 12: 20%
  bucket 11: 100%
  Sorting block of length 807849 for bucket 11
  (Using difference cover)
  bucket 12: 30%
  bucket 12: 40%
  bucket 12: 50%
  bucket 12: 60%
  bucket 12: 70%
  bucket 12: 80%
  bucket 12: 90%
  bucket 12: 100%
  Sorting block of length 932833 for bucket 12
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 807850 for bucket 11
Getting block 13 of 14
  Reserving size (1139729) for bucket 13
  Calculating Z arrays for bucket 13
  Entering block accumulator loop for bucket 13:
  bucket 13: 10%
  bucket 13: 20%
  bucket 13: 30%
  bucket 13: 40%
  bucket 13: 50%
  bucket 13: 60%
  Sorting block time: 00:00:00
Returning block of 932834 for bucket 12
  bucket 13: 70%
  bucket 13: 80%
Getting block 14 of 14
  Reserving size (1139729) for bucket 14
  Calculating Z arrays for bucket 14
  Entering block accumulator loop for bucket 14:
  bucket 13: 90%
  bucket 14: 10%
  bucket 14: 20%
  bucket 13: 100%
  Sorting block of length 556451 for bucket 13
  (Using difference cover)
  bucket 14: 30%
  bucket 14: 40%
  bucket 14: 50%
  bucket 14: 60%
  bucket 14: 70%
  bucket 14: 80%
  bucket 14: 90%
  Sorting block time: 00:00:00
Returning block of 556452 for bucket 13
  bucket 14: 100%
  Sorting block of length 804368 for bucket 14
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 804369 for bucket 14
Exited GFM loop
fchr[A]: 0
fchr[C]: 3766349
fchr[G]: 6086925
fchr[T]: 8404025
fchr[$]: 12157105
Exiting GFM::buildToDisk()
Returning from initFromVector
Wrote 8248111 bytes to primary GFM file: out/hisat2_index/genome.1.ht2
Wrote 3039284 bytes to secondary GFM file: out/hisat2_index/genome.2.ht2
Re-opening _in1 and _in2 as input streams
Returning from GFM constructor
Returning from initFromVector
Wrote 5399069 bytes to primary GFM file: out/hisat2_index/genome.5.ht2
Wrote 3092708 bytes to secondary GFM file: out/hisat2_index/genome.6.ht2
Re-opening _in5 and _in5 as input streams
Returning from HGFM constructor
Headers:
    len: 12157105
    gbwtLen: 12157106
    nodes: 12157106
    sz: 3039277
    gbwtSz: 3039277
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 0
    eftabSz: 0
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 759820
    offsSz: 3039280
    lineSz: 64
    sideSz: 64
    sideGbwtSz: 48
    sideGbwtLen: 192
    numSides: 63319
    numLines: 63319
    gbwtTotLen: 4052416
    gbwtTotSz: 4052416
    reverse: 0
    linearFM: Yes
Total time for call to driver() for forward index: 00:00:02
